AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete EKS Cluster setup with IAM roles, security groups, and add-ons'

Parameters:
  ClusterName:
    Type: String
    Default: 'eks-dev-cluster'
    Description: 'Name for the EKS cluster'
    
  KubernetesVersion:
    Type: String
    Default: '1.30'
    Description: 'Kubernetes version'
    
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: 'VPC ID for the EKS cluster'
    
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: 'List of subnet IDs for the EKS cluster (minimum 2 subnets in different AZs)'
    
  NodeGroupSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: 'List of subnet IDs for the node group'
    
  NodeInstanceType:
    Type: String
    Default: 'm5.4xlarge'
    Description: 'EC2 instance type for the EKS worker nodes'
    
  NodeGroupMinSize:
    Type: Number
    Default: 1
    Description: 'Minimum size of the node group'
    
  NodeGroupMaxSize:
    Type: Number
    Default: 10
    Description: 'Maximum size of the node group'
    
  NodeGroupDesiredSize:
    Type: Number
    Default: 2
    Description: 'Desired size of the node group'

Resources:
  # IAM Role for EKS Cluster
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmazonEKSClusterRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  # IAM Role for EKS Node Group
  EKSNodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmazonEKSNodeRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # Custom EFS Policy
  EKSEFSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: AmazonEKSEFSPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - elasticfilesystem:CreateFileSystem
              - elasticfilesystem:CreateMountTarget
              - elasticfilesystem:CreateAccessPoint
              - elasticfilesystem:CreateSecurityGroup
              - elasticfilesystem:DescribeFileSystems
              - elasticfilesystem:DescribeMountTargets
              - elasticfilesystem:DescribeAccessPoints
              - elasticfilesystem:DescribeSecurityGroups
              - elasticfilesystem:ModifyMountTargetSecurityGroups
              - elasticfilesystem:DeleteFileSystem
              - elasticfilesystem:DeleteMountTarget
              - elasticfilesystem:DeleteAccessPoint
            Resource: '*'
          - Effect: Allow
            Action:
              - ec2:DescribeSubnets
              - ec2:DescribeVpcs
              - ec2:DescribeSecurityGroups
            Resource: '*'

  # Custom AutoScaler Policy
  EKSAutoScalePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: AmazonEKSAutoScalePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:DescribeLaunchConfigurations
              - autoscaling:DescribeTags
              - autoscaling:SetDesiredCapacity
              - autoscaling:TerminateInstanceInAutoScalingGroup
              - ec2:DescribeLaunchTemplateVersions
            Resource: '*'

  # EKS Cluster Security Group
  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for EKS cluster'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref EKSNodeSecurityGroup
          Description: 'HTTPS from worker nodes'
        - IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
          SourceSecurityGroupId: !Ref EKSNodeSecurityGroup
          Description: 'Kubernetes API from worker nodes'
        - IpProtocol: tcp
          FromPort: 9443
          ToPort: 9443
          SourceSecurityGroupId: !Ref EKSNodeSecurityGroup
          Description: 'Webhook from worker nodes'
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-cluster-sg'

  # EKS Node Security Group
  EKSNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for EKS worker nodes'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1025
          ToPort: 65535
          SourceSecurityGroupId: !Ref EKSClusterSecurityGroup
          Description: 'All traffic from cluster'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref EKSClusterSecurityGroup
          Description: 'HTTPS from cluster'
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-node-sg'

  # Allow communication between nodes
  NodeToNodeIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EKSNodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref EKSNodeSecurityGroup
      Description: 'All traffic between worker nodes'

  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSClusterSecurityGroup
        SubnetIds: !Ref SubnetIds
        EndpointConfigPrivate: true
        EndpointConfigPublic: false
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP
    DependsOn:
      - EKSClusterRole

  # OIDC Identity Provider
  OIDCProvider:
    Type: AWS::IAM::OIDCIdentityProvider
    Properties:
      Url: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 9e99a48a9960b14926bb7f3b02e22da2b0ab7280
    DependsOn:
      - EKSCluster

  # EBS CSI Driver Role
  EBSCSIDriverRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmazonEKS_EBS_CSI_DriverRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref OIDCProvider
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                !Sub "${OIDCProvider}:sub": "system:serviceaccount:kube-system:ebs-csi-controller-sa"
                !Sub "${OIDCProvider}:aud": "sts.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy

  # EFS CSI Driver Role
  EFSCSIDriverRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmazonEKS_EFS_CSI_DriverRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref OIDCProvider
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                !Sub "${OIDCProvider}:sub": "system:serviceaccount:kube-system:efs-csi-controller-sa"
                !Sub "${OIDCProvider}:aud": "sts.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEFSCSIDriverPolicy

  # AutoScaler Role
  AutoScalerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmazonEKSAutoScaleRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref OIDCProvider
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                !Sub "${OIDCProvider}:sub": "system:serviceaccount:default:auto-scale-sa"
                !Sub "${OIDCProvider}:aud": "sts.amazonaws.com"
      ManagedPolicyArns:
        - !Ref EKSAutoScalePolicy

  # EKS Add-ons
  VPCCNIAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: vpc-cni
      ResolveConflicts: OVERWRITE
    DependsOn:
      - EKSCluster

  CoreDNSAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: coredns
      ResolveConflicts: OVERWRITE
    DependsOn:
      - EKSNodeGroup

  KubeProxyAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: kube-proxy
      ResolveConflicts: OVERWRITE
    DependsOn:
      - EKSCluster

  PodIdentityAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: eks-pod-identity-agent
      ResolveConflicts: OVERWRITE
    DependsOn:
      - EKSCluster

  EBSCSIAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: aws-ebs-csi-driver
      ServiceAccountRoleArn: !GetAtt EBSCSIDriverRole.Arn
      ResolveConflicts: OVERWRITE
    DependsOn:
      - EBSCSIDriverRole
      - EKSNodeGroup

  EFSCSIAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: aws-efs-csi-driver
      ServiceAccountRoleArn: !GetAtt EFSCSIDriverRole.Arn
      ResolveConflicts: OVERWRITE
    DependsOn:
      - EFSCSIDriverRole
      - EKSNodeGroup

  # EKS Node Group
  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodeRole.Arn
      NodegroupName: !Sub '${ClusterName}-node-group'
      Subnets: !Ref NodeGroupSubnetIds
      InstanceTypes:
        - !Ref NodeInstanceType
      ScalingConfig:
        MinSize: !Ref NodeGroupMinSize
        MaxSize: !Ref NodeGroupMaxSize
        DesiredSize: !Ref NodeGroupDesiredSize
      UpdateConfig:
        MaxUnavailable: 1
      Tags:
        Environment: development
        Project: EKS
    DependsOn:
      - EKSNodeRole
      - EKSCluster

  # Access Entry for Admin User
  EKSAccessEntry:
    Type: AWS::EKS::AccessEntry
    Properties:
      ClusterName: !Ref EKSCluster
      PrincipalArn: !Sub 'arn:aws:iam::${AWS::AccountId}:user/EKS_CLUSTER_ADMIN'
      Type: STANDARD
      AccessPolicies:
        - PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
          AccessScope:
            Type: cluster
    DependsOn:
      - EKSCluster

Outputs:
  ClusterName:
    Description: 'EKS Cluster Name'
    Value: !Ref EKSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'

  ClusterEndpoint:
    Description: 'EKS Cluster Endpoint'
    Value: !GetAtt EKSCluster.Endpoint
    Export:
      Name: !Sub '${AWS::StackName}-ClusterEndpoint'

  ClusterArn:
    Description: 'EKS Cluster ARN'
    Value: !GetAtt EKSCluster.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ClusterArn'

  OIDCIssuerURL:
    Description: 'OIDC Issuer URL'
    Value: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
    Export:
      Name: !Sub '${AWS::StackName}-OIDCIssuerURL'

  NodeGroupArn:
    Description: 'Node Group ARN'
    Value: !GetAtt EKSNodeGroup.Arn
    Export:
      Name: !Sub '${AWS::StackName}-NodeGroupArn'

  EBSCSIDriverRoleArn:
    Description: 'EBS CSI Driver Role ARN'
    Value: !GetAtt EBSCSIDriverRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EBSCSIDriverRoleArn'

  EFSCSIDriverRoleArn:
    Description: 'EFS CSI Driver Role ARN'
    Value: !GetAtt EFSCSIDriverRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EFSCSIDriverRoleArn'

  AutoScalerRoleArn:
    Description: 'AutoScaler Role ARN'
    Value: !GetAtt AutoScalerRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AutoScalerRoleArn'
